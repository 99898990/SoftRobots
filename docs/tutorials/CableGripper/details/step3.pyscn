from stlib.physics.deformable import ElasticMaterialObject
from stlib.physics.constraints import FixedBox
from stlib.scene import Node 
from softrobots.actuators import PullingCable
from stlib.tools import loadPointListFromFile

import Sofa
class FingerController(Sofa.PythonScriptController):
    def __init__(self, node, cable):
        self.cableconstraintvalue = cable.getObject("CableConstraint").findData('value')
        self.name = "FingerController"

    def onKeyPressed(self,c):
        if (c == "+"):
            self.cableconstraintvalue.value =  self.cableconstraintvalue.value[0][0] + 1.
        if (c == "-"):
            self.cableconstraintvalue.value =  self.cableconstraintvalue.value[0][0] - 1.

def Finger(parentNode=None, name="Finger",
           withRotation=[0.0, 0.0, 0.0], withTranslation=[0.0, 0.0, 0.0],
           withFixingBox=[0.0,0.0,0.0], withPullPointLocation=[0.0,0.0,0.0]):

    finger = Node(parentNode, "Finger")
    eobject = ElasticMaterialObject(finger, fromVolumeMesh="data/mesh/finger.vtk")

    FixedBox(eobject, withVisualization=True, atPositions=[-10,-10,-10,10,10,10])
    cable = PullingCable(eobject, withCableGeometry=loadPointListFromFile("data/mesh/cable.json"))
   
    FingerController(finger, cable)

def createScene(rootNode):
    # -*- coding: utf-8 -*-
    from stlib.scene import MainHeader
    from stlib.visuals import ShowGrid
    from stlib.physics.rigid import Floor
    from stlib.physics.rigid import Cube
    m=MainHeader(rootNode)
    m.getObject("VisualStyle").displayFlags='showForceFields showBehaviorModels showInteractionForceFields'
 
    ShowGrid(rootNode)
    Finger(rootNode)

    return rootNode
