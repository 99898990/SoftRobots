# -*- coding: utf-8 -*-
"""
    In step3 we are teaching the following concepts
    Components: TetrahedronFEMForceField, Constraints
"""
from splib.numerics import sin,cos, to_radians, RigidDof
from stlib.scene import Scene
from stlib.physics.deformable import ElasticMaterialObject
from actuatedarm import ActuatedArm

def ElasticBody(parent):
    body = parent.createChild("ElasticBody")

    e = ElasticMaterialObject(body, volumeMeshFileName="data/mesh2/tripod_mid.gidmsh", 
                              poissonRatio=0.45, youngModulus=150, totalMass=0.032,
                              translation=[0.0,27.0,0.0], rotation=[90,0,0])
    visual = body.createChild("Visual")
    visual.createObject("MeshSTLLoader", name="loader", filename="data/mesh2/tripod_mid.stl", rotation=[90,0,0], 
                        translation=[0.0,27.0,0.0])
    visual.createObject("OglModel", name="renderer", src="@loader", color=[1.0,1.0,1.0,0.5])

    visual.createObject("BarycentricMapping",
                             input=e.dofs.getLinkPath(),
                             output=visual.renderer.getLinkPath())
    return body


def Tripod(parent, name="Tripod", radius=55, numMotors=3, angleShift=180.0):
    tripod = parent.createChild(name)
    body = ElasticBody(tripod)
    
    dist = radius
    numstep = numMotors
    for i in range(0,numstep):
        name = "ActuatedArm"+str(i)
        fi = float(i)
        fnumstep = float(numstep)
        angle = fi*360/fnumstep
        angle2 = fi*360/fnumstep+angleShift
        eulerRotation = [0,angle,0]
        translation = [dist*sin(to_radians(angle2)), -1.35, dist*cos(to_radians(angle2))]

        c = ActuatedArm(tripod, name=name,
                                       translation=translation, eulerRotation=eulerRotation,
                                       attachingTo=body.ElasticMaterialObject)

    return tripod


def createScene(rootNode):
    scene = Scene(rootNode)
    scene.VisualStyle.displayFlags="showBehavior"

    tripod = Tripod(rootNode)

    simu = scene.createChild("SimulationPlan")
    simu.createObject("EulerImplicit")
    simu.createObject("CGLinearSolver")
    simu.addChild(tripod.ActuatedArm0)
    simu.addChild(tripod.ActuatedArm1)
    simu.addChild(tripod.ActuatedArm2)
