# -*- coding: utf-8 -*-
"""
Step 4: Adding the ActuatedArm prefab and connect it to the deformable object.
This prefab is defining the servomotor, the servo-arm and the constraint that attaches the end of the arm to the deformable object.
"""
from splib.numerics import sin, cos, to_radians, vec3, Quat
from stlib.scene import Scene, Interaction
from splib.animation import animate
from actuatedarm import ActuatedArm
from tripod import ElasticBody
from splib.objectmodel import SofaPrefab, SofaObject
from stlib.physics.mixedmaterial import Rigidify
from fixingbox import FixingBox

# Let's define a Tripod prefab now, that we can later call in the createScene function
@SofaPrefab
class Tripod(SofaObject):

    def __init__(self, parent, name="Tripod", radius=60, numMotors=3, angleShift=180.0):
        self.node = parent.createChild(name)

        # It is using the ElasticBody that was made in the previous step, and that has also been included in the tripod.py script.
        body = ElasticBody(self.node)

        # Instanciating the FixingBox prefab into the graph, constraining the mechanical object of the ElasticBody.
        fix = FixingBox(parent,
                    body.ElasticMaterialObject,
                    translation=[0.0, 25.0, 0.0],
                    scale=[10., 10., 10.])
        parent.FixingBox.boxroi.drawBoxes = True

        # The actuated arms are positionned around the silicone piece using a loop structure
        dist = radius
        numstep = numMotors
        self.actuatedarms = []
        groupIndices = []
        frames = []
        for i in range(0, numstep):
            name = "ActuatedArm"+str(i)
            fi = float(i)
            fnumstep = float(numstep)
            angle = fi*360/fnumstep
            angle2 = fi*360/fnumstep+angleShift
            eulerRotation = [0, angle, 0]
            translation = [dist*sin(to_radians(angle2)), -1.35, dist*cos(to_radians(angle2))]


            arm = ActuatedArm(self.node, name=name, translation=translation, eulerRotation=eulerRotation)
            handle = arm.addHandle(translation=translation, eulerRotation=eulerRotation)
            
            handle.boxroi.position = body.ElasticMaterialObject.dofs.getData("position").getLinkPath()  
            handle.boxroi.drawPoints = True
            handle.boxroi.drawBoxes = True
            handle.boxroi.drawSize = 2
            
            groupIndices.append([ind[0] for ind in handle.boxroi.indices])
            frames.append(vec3.vadd(translation, [0.0, 25.0, 0.0]) + list(Quat.createFromEuler([0, float(i)*360/float(numstep), 0], inDegree=True)))

            self.actuatedarms.append(arm)

        
        rigidifiedstruct = Rigidify(self.node, body.ElasticMaterialObject, groupIndices=groupIndices, frames=frames, name="RigidifiedStruture")
        rigidifiedstruct.DeformableParts.dofs.showObject=True
        rigidifiedstruct.DeformableParts.dofs.showObjectScale=2.0
        
        rigidifiedstruct.RigidParts.dofs.showObject=True        
        rigidifiedstruct.RigidParts.dofs.showObjectScale=10.0
        rigidifiedstruct.RigidParts.dofs.drawMode = 5

        print("GROUP INDICES: " + str(groupIndices))

def Modeling(parent):
    modeling = parent.createChild("Modeling")
    return modeling

def Simulation(parent):
    simulation = parent.createChild("Simulation")
    simulation.createObject("EulerImplicitSolver")
    simulation.createObject("CGLinearSolver", iterations=120, tolerance=1e-20, threshold=1e-20)
    return simulation

def createScene(rootNode):
    scene = Scene(rootNode, gravity=[0.0, -9810.0, 0.0])
    rootNode.dt = 0.025
    scene.VisualStyle.displayFlags = "showBehavior"

    scene.createObject("MeshSTLLoader", name="loader", filename="data/mesh/blueprint.stl")
    scene.createObject("OglModel", src="@loader")

    
    modeling = Modeling(rootNode)
    tripod = Tripod(modeling)

    def myanimate(targets, factor):
        import math
        for arm in targets:
                arm.ServoMotor.BaseFrame.ArticulatedJoint.dofs.position = math.sin( -factor*0.5 )     
    
    animate(myanimate, {"targets":[tripod.ActuatedArm0,
                                   tripod.ActuatedArm1,
                                   tripod.ActuatedArm2]}, duration=4)

    
    #Interaction(rootNode, targets=[tripod.ActuatedArm0,
    #                               tripod.ActuatedArm1,
    #                               tripod.ActuatedArm2])
    simulation = Simulation(rootNode)
    simulation.addChild(tripod.node)
