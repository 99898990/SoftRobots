import Sofa
from stlib.scene import MainHeader, get
from stlib.solver import DefaultSolver
from stlib.animation import AnimationManager, animate
from stlib.animation.easing import LinearRamp
from math import sin,cos
from tripod import Tripod

def openCloseAnimation(motors, factor):
    for motor in motors:
        motor.angle = LinearRamp(3.14/2, -3.14/2, sin(2.0*factor))

def smoothAnimation(motors, begin, end, factor):
    for motor in motors:
        motor.angle = LinearRamp(begin, end, factor)

class Controller(Sofa.PythonScriptController):
    def __init__(self, node, tripod):
        self.name = "TripodController"
        self.tripod = tripod
        self.motors = [get(self.tripod, "ActuatedArm0/ServoMotor/KinematicMotorController"),
                       get(self.tripod, "ActuatedArm1/ServoMotor/KinematicMotorController"),
                       get(self.tripod, "ActuatedArm2/ServoMotor/KinematicMotorController")]

    def onKeyPressed(self, c):
        doAnimation = None
        incrStep = None
        if c == '+':
            incrStep = 0.3
        elif c == "-":
            incrStep = -0.3
        elif c == "A":
            doAnimation = True

        if doAnimation:
            animate( openCloseAnimation, {"motors" : self.motors},
                                          duration=1.0, mode="pingpong")
        elif incrStep != None:
            animate( smoothAnimation, {"motors" : self.motors,
                                       "begin" : self.motors[0].angle ,
                                       "end" : self.motors[0].angle + incrStep }, duration=0.1)

#Units: cm and kg
def createScene(rootNode):
    r = MainHeader(rootNode, plugins=["SoftRobots"])
    get(r, "VisualStyle.displayFlags").value = "showForceFields"

    tripod = Tripod(rootNode)

    Controller(rootNode, tripod)

    return rootNode
