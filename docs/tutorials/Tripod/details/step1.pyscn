# -*- coding: utf-8 -*-
"""
Step 1:
We are introducing basic mechanical modeling, the new components bring
time integration and a mechanical object to the scene .
"""
from stlib.scene import Scene

def createScene(rootNode):
    ## Setting the gravity, assuming the length unit is in centimeters
    scene = Scene(rootNode, gravity=[0.0,-981.0,0.0])

    ## Setting the timestep in seconds
    scene.dt = 0.001

    ## Graphic modelling of the legends associated to the servomotors
    scene.createObject("MeshSTLLoader", name="loader", filename="data/mesh2/blueprint.stl")
    scene.createObject("OglModel", src="@loader")

    ## Tool to load the mesh file of the silicone piece. It will be used for both the mechnical and the visual models.
    rootNode.createObject("MeshSTLLoader", name="loader", filename="data/mesh2/tripod_mid.stl")

    ## Basic mechanical modelling of the silicone piece
    elasticbody = rootNode.createChild("ElasticBody")
    elasticbody.createObject("MechanicalObject", name="dofs",
                             position=rootNode.loader.position,
                             showObject=True, showObjectScale=5.0,
                             rotation=[90.0,0.0,0.0])
    elasticbody.createObject("UniformMass")

    elasticbody.createObject("EulerImplicit")
    elasticbody.createObject("SparseLDLSolver")

    ## Visual object
    visual = rootNode.createChild("Visual")
    # The mesh used for the Visual object is the same as the one for the MechanicalObject, and has been introduced in the rootNode
    visual.createObject("OglModel", name="renderer",
        src='@../loader',
        color=[1.0,1.0,1.0,0.5])

    ## A mapping applies the deformations computed on the mechanical model (the input parameter)
    ## to the visual model (the output parameter).
    elasticbody.createObject("IdentityMapping",
                             input=elasticbody.dofs.getLinkPath(),
                             output=visual.renderer.getLinkPath())
