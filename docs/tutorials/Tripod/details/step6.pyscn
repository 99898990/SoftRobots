# -*- coding: utf-8 -*-
"""
Step 6: We are adding controller.
The controller will connect user actions to specific behavior.
"""
import Sofa
from splib.numerics import RigidDof
from splib.animation import animate
from splib.constants import Key
from stlib.scene import Scene, Interaction

from tripod import Tripod

def setupanimation(actuators, step, angularstep, factor):
    """This functions is called repeatidely in an animation.
       It moves the actuators by translating & rotating them according to the factor
       value.
    """
    for actuator in actuators:
            rigid = RigidDof( actuator.dofs )
            rigid.translate( rigid.forward * step * factor )
            actuator.ServoMotor.angle += angularstep * factor

class MyController(Sofa.PythonScriptController):
    """This controller has two role:
       - if user press up/left/right/down/plus/minus the servo motor angle
         is changed.
       - if user press A an animation is started to move the motor to the physical position
         they are occupying in the real robot.
    """
    def __init__(self, node, actuators):
        self.stepsize = 0.1
        self.actuators = actuators

    def onKeyPressed(self, key):
        if key == Key.uparrow:
            self.actuators[0].ServoMotor.angle += self.stepsize
        elif key == Key.downarrow:
            self.actuators[0].ServoMotor.angle -= self.stepsize

        if key == Key.leftarrow:
            self.actuators[1].ServoMotor.angle += self.stepsize
        elif key == Key.rightarrow:
            self.actuators[1].ServoMotor.angle -= self.stepsize

        if key == Key.plus:
            self.actuators[2].ServoMotor.angle += self.stepsize
        elif key == Key.minus:
            self.actuators[2].ServoMotor.angle -= self.stepsize

        if key == Key.A:
            animate(setupanimation,{"actuators" : self.actuators, "step" : 3.0,
                                    "angularstep" : -0.14}, duration=0.2)

def createScene(rootNode):
    scene = Scene(rootNode, gravity=[0.0,-9810,0.0])
    scene.VisualStyle.displayFlags="showBehavior"

    scene.createObject("OglModel", fileMesh="data/mesh2/blueprint.stl")    

    model = scene.createChild("Model")
    tripod = Tripod(model)

    MyController(rootNode, [tripod.ActuatedArm0,
                            tripod.ActuatedArm1,
                            tripod.ActuatedArm2])

    Interaction(rootNode, targets=[tripod.ActuatedArm0,
                                   tripod.ActuatedArm1,
                                   tripod.ActuatedArm2])
