# -*- coding: utf-8 -*-
"""
    In step3 we are teaching the following concepts
    Components: TetrahedronFEMForceField, Constraints
"""
import Sofa
from splib.numerics import RigidDof
from splib.animation import animate
from splib.constants import Key
from stlib.scene import Scene
from splib.numerics import sin,cos, to_radians
from stlib.scene import Scene
from stlib.physics.deformable import ElasticMaterialObject
from actuatedarm import ActuatedArm

def ElasticBody(parent):
    body = parent.createChild("ElasticBody")

    e = ElasticMaterialObject(body, 
                              volumeMeshFileName="data/mesh/tripod.gidmsh",rotation=[90,0,0])
    visual = body.createChild("Visual")
    visual.createObject("MeshSTLLoader", name="loader", filename="data/mesh/tripod.stl")
    visual.createObject("OglModel", name="renderer", src="@loader", color=[1.0,1.0,1.0,0.5])

    visual.createObject("BarycentricMapping",
                             input=e.dofs.getLinkPath(),
                             output=visual.renderer.getLinkPath())

    e.addCollisionModel(collisionMesh="data/mesh/tripod.stl")

    return body


def Tripod(parent, name="Tripod", radius=4.0, numMotors=3, angleShift=180.0):
    tripod = parent.createChild(name)
    body = ElasticBody(tripod)
    
    dist = radius
    numstep = numMotors
    for i in range(0,numstep):
        name = "ActuatedArm"+str(i)
        fi = float(i)
        fnumstep = float(numstep)
        angle = fi*360/fnumstep
        angle2 = fi*360/fnumstep+angleShift
        eulerRotation = [0,angle,0]
        translation = [dist*sin(to_radians(angle2)), -1.35, dist*cos(to_radians(angle2))]

        c = ActuatedArm(tripod, name=name,
                                       translation=translation, eulerRotation=eulerRotation,
                                       attachingTo=body.ElasticMaterialObject)

    return tripod

def setupanimation(actuators, step, angularstep, factor):
    for actuator in actuators:
            rigid = RigidDof( actuator.dofs )
            rigid.translate( rigid.forward * step * factor )
            actuator.ServoMotor.angle += angularstep * factor

class MyController(Sofa.PythonScriptController):
    def __init__(self, node, actuators):
        self.stepsize = 0.1
        self.actuators = actuators

    def onKeyPressed(self, key):
        if key == Key.uparrow:
            self.actuators[0].ServoMotor.angle += self.stepsize 
        elif key == Key.downarrow:            
            self.actuators[0].ServoMotor.angle -= self.stepsize

        if key == Key.leftarrow:
            self.actuators[1].ServoMotor.angle += self.stepsize 
        elif key == Key.rightarrow:            
            self.actuators[1].ServoMotor.angle -= self.stepsize

        if key == Key.plus:
            self.actuators[2].ServoMotor.angle += self.stepsize 
        elif key == Key.minus:            
            self.actuators[2].ServoMotor.angle -= self.stepsize

        if key == Key.space:
            animate(setupanimation,{"actuators" : self.actuators, "step" : 0.13, 
                                    "angularstep" : -0.12}, duration=0.2)    

def createScene(rootNode):
    scene = Scene(rootNode)
    scene.VisualStyle.displayFlags="showBehavior"

    model = scene.createChild("Model")
    
    tripod = Tripod(model,radius=5.0)

    MyController(rootNode, [tripod.ActuatedArm0, 
                            tripod.ActuatedArm1, 
                            tripod.ActuatedArm2])

    simu = scene.createChild("SimulationPlan")
    simu.createObject("EulerImplicit")    
    simu.createObject("CGLinearSolver")
    simu.addChild(tripod.ActuatedArm0)
    simu.addChild(tripod.ActuatedArm1)
    simu.addChild(tripod.ActuatedArm2)

