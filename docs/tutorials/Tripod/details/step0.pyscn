import Sofa
from stlib.scene import MainHeader, ContactHeader, Node
from stlib.animation import AnimationManager, animate
from stlib.animation.easing import LinearRamp
from stlib.physics.rigid import Sphere
from stlib.algorithms import get
from stlib.debug import DebugManager, drawLine, drawText, worldToScreenPoint, BluePrint
from math import sin,cos,pi
from tripod import Tripod, addSimulationPlan


def tripodAnimation1(motor1, motor2, motor3, factor):
    motor1.angle = LinearRamp(0, -3.14/2, cos(factor*pi))
    motor2.angle = LinearRamp(0, -3.14/2, sin(factor*pi*2))
    motor3.angle = LinearRamp(0, -3.14/2, factor)

def tripodAnimation2(motors, factor):
    drawLine([0,0,0],[10,0,0])
    for i in range(0,len(motors)):
        motor = motors[i]
        f1 = cos(LinearRamp(-3.14, 3.14, factor*float(i)*3.14/3))
        p = motor.position[0]
        pp = p[:3]
        pp[1] = f1
        motor.findData("position").value = pp + p[3:7]

def textAnimation(factor):
    drawText("Dancing Tripod", 20 , LinearRamp(-20,100, sin(factor)))
    drawText("Let's Party", 250 , LinearRamp(-20,100, sin(2*factor)))
    drawText("Have Fun", 400 , LinearRamp(-20,100, cos(3*factor)))

class Controller(Sofa.PythonScriptController):
    def __init__(self, node, tripod):
        self.tripod = tripod

    def onKeyPressed(self, c):
        print("KEY "+str(c))
        if c == "A":
            animate(tripodAnimation2, {"motors" : [get(self.tripod, "ActuatedArm0/MechanicalObject"),
                                                   get(self.tripod, "ActuatedArm1/MechanicalObject"),
                                                   get(self.tripod, "ActuatedArm2/MechanicalObject")]},
                                       duration=1.0, mode="pingpong")
            animate(textAnimation, {}, duration=0.3, mode="pingpong")
        elif c == "F":
            animate(tripodAnimation1, {"motor1" : get(self.tripod, "ActuatedArm0/ServoMotor"),
                                       "motor2" : get(self.tripod, "ActuatedArm1/ServoMotor"),
                                       "motor3" : get(self.tripod, "ActuatedArm2/ServoMotor")},
                                       duration=1.0, mode="pingpong")

            pass
        elif c == "+":
            pass

        elif c == "-":
            pass

class RecordPath(Sofa.PythonScriptController):
    def __init__(self, node, target):
        self.target = target
        self.p0 = []
        self.p1 = []
        self.trace = []
 
    def onBeginAnimationStep(self, dt):
        self.p0 = self.target.position
        self.mdraw()
           
    def onIdle(self):
        self.mdraw()
     
    def onEndAnimationStep(self, dt):
        self.p1 = self.target.position
        #if len(self.trace) > 11 : 
        self.trace = self.trace[0:10]
        self.trace.append((self.p0, self.p1))        

    def mdraw(self):
        for p0, p1 in self.trace:
            for i in range(0, len(p0)):  
                drawLine(p0[i][0:3], p1[i][0:3])

class ShowPosition(Sofa.PythonScriptController):
    def __init__(self, node, target):
        self.target = target
        
    def onBeginAnimationStep(self, dt):
        self.draw()
  
    def onEndAnimationStep(self, dt):
        self.draw()
        
    def draw(self):
        drawText("Position", 30, 40)

def addCustomSimulationPlan(parentNode, modelNode):
    parentNode.createObject("FreeMotionAnimationLoop")
    parentNode.createObject("DefaultVisualManagerLoop")

    parentNode.createObject("GenericConstraintSolver")

    part1 = Node(parentNode, "MechanicalPart1")
    part1.createObject("EulerImplicit")
    part1.createObject("SparseLDLSolver")
    #part1.addChild( get(modelNode, "ElasticBody/ElasticMaterialObject") )
    part1.addChild( get(modelNode, "ElasticBody") )

    part2 = Node(parentNode, "MechanicalPart2")
    part2.createObject("EulerImplicit")
    part2.createObject("CGLinearSolver")
    part2.addChild( get(modelNode, "ActuatedArm0") )
    part2.addChild( get(modelNode, "ActuatedArm1") )
    part2.addChild( get(modelNode, "ActuatedArm2") )
    return parentNode


#Units: cm and kg
def createScene(rootNode):
    r = MainHeader(rootNode, plugins=["SoftRobots"], doDebug=True)
    ContactHeader(rootNode, alarmDistance=1.0, contactDistance=1.0)
    get(r, "VisualStyle.displayFlags").value = "showForceFields"

    b=BluePrint(rootNode)
    b.addRule([0.0,0.0,0.0], [1.0,0.0,0.0], length=5)
    b.addRule([0.0,0.0,0.0], [0.0,1.0,0.0], length=5)
    b.addRule([0.0,0.0,0.0], [0.0,0.0,1.0], length=5)

    modelNode = rootNode.createChild("Model")    
    sphere=Sphere(modelNode, translation=[0,1.0,0.0])
    tripod = Tripod(modelNode)
    
    #Controller(rootNode, tripod)
    #RecordPath(rootNode, get(tripod, "ElasticMaterialObject/MechanicalObject"))

   
    sim = Node(rootNode, "SimulationPlan")
    addCustomSimulationPlan(sim, tripod)
    sim.addChild(sphere) 

    return rootNode
