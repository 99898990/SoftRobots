# -*- coding: utf-8 -*-
"""
Step 3: Introduce elastic material modeling
"""
from stlib.physics.deformable import ElasticMaterialObject
from stlib.scene import Scene

def createScene(rootNode):
    scene = Scene(rootNode, gravity=[0.0,-9810.0,0.0])
    scene.dt = 0.001

    ## Mechanical modelling is done through 'forcefields'
    ## It is possible to visualize the "forcefields" by doing
    scene.VisualStyle.displayFlags="showForceFields"


    ## To simulate elastic object we need:
    ## a deformation law (here linear elasticity)
    ## a solving method (here FEM)
    ## as we are using FEM we need a space discretization (here tetrahedron)
    elasticbody = rootNode.createChild("ElasticBody")
    elasticbody.createObject("EulerImplicit")
    elasticbody.createObject("SparseLDLSolver")
    elasticbody.createObject('GIDMeshLoader', name='loader', filename="data/mesh2/tripod_mid.gidmsh")
    elasticbody.createObject('TetrahedronSetTopologyContainer', src='@loader', name='container')
    elasticbody.createObject("MechanicalObject", name="dofs", rotation=[90.0,0.0,0.0],
                             showObject=True, showObjectScale=5.0)
    elasticbody.createObject("UniformMass", totalMass=0.032)
    elasticbody.createObject("TetrahedronFEMForceField", youngModulus=150, poissonRatio=0.45)

    ## We are still using a visual model that connects the mesh with
    visual = elasticbody.createChild("Visual")
    visual.createObject("MeshSTLLoader", name="loader", filename="data/mesh2/tripod_mid.stl", rotation=[90,0,0])
    visual.createObject("OglModel", src="@loader", name="renderer", color=[1.0,1.0,1.0,0.5])

    visual.createObject("BarycentricMapping",
                        input=elasticbody.dofs.getLinkPath(),
                        output=visual.renderer.getLinkPath())


