# -*- coding: utf-8 -*-
import Sofa
from stlib.scene import Scene, Interaction
from splib.numerics import sin,cos, to_radians, RigidDof
from splib.animation import animate
from stlib.scene import Scene
from splib.constants import Key
from math import floor, pi
from tripod import Tripod

def setupanimation(actuators, step, angularstep, factor):
    for actuator in actuators:
            rigid = RigidDof( actuator.dofs )
            rigid.translate( rigid.forward * step * factor )
            actuator.ServoMotor.angle += angularstep * factor

class MyController(Sofa.PythonScriptController):
    def __init__(self, node, actuators, serialportctrl):
        self.stepsize = 0.1
        self.actuators = actuators
        self.serialportctrl = serialportctrl

    def onKeyPressed(self, key):
        if key == Key.uparrow:
            self.actuators[0].ServoMotor.angle += self.stepsize
        elif key == Key.downarrow:
            self.actuators[0].ServoMotor.angle -= self.stepsize

        if key == Key.leftarrow:
            self.actuators[1].ServoMotor.angle += self.stepsize
        elif key == Key.rightarrow:
            self.actuators[1].ServoMotor.angle -= self.stepsize

        if key == Key.plus:
            self.actuators[2].ServoMotor.angle += self.stepsize
        elif key == Key.minus:
            self.actuators[2].ServoMotor.angle -= self.stepsize


        if key == Key.A and self.serialportctrl.state == "init":
            self.serialportctrl.state = "no-comm"
            animate(setupanimation,{"actuators" : self.actuators, "step" : 3.0,
                                    "angularstep" : -0.145}, duration=0.2)
        if key == Key.B and self.serialportctrl.state == "no-comm":
            self.serialportctrl.state = "comm"

def SerialPortBridgeGeneric(rootNode, serialport="/dev/ttyUSB0"):
    return rootNode.createObject("SerialPortBridgeGeneric", port=serialport, baudRate=115200, size=3, listening=True)

class SerialPortController(Sofa.PythonScriptController):
    def __init__(self, node, inputs, serialport):
        self.name = "serialportcontroller"
        self.servos = inputs
        self.serialport = serialport
        self.serialport.sentData = [150,150,150]
        self.state = "init"

    def onEndAnimationStep(self, dt):
        if self.state == "init":
            drawText("Press A once to got to final configuration", 100,50)
            return

        if self.state == "no-comm":
            drawText("Press B once to start sending data", 100,50)
            return

        angles = []

        for servo in self.servos:
            angleByte = 90+floor((servo.angle+pi/2.0)*255/pi)
            if angleByte < 60:
                angleByte = 60
            if angleByte > 180:
                angleByte = 180

            angles.append( angleByte )

        self.serialport.sentData = angles

def createScene(rootNode):
    scene = Scene(rootNode, gravity=[0.0,-9810.0,0.0], plugins=["SoftRobots"])
    scene.VisualStyle.displayFlags="showBehavior"

    scene.createObject("OglModel", fileMesh="data/mesh2/blueprint.stl")

    model = scene.createChild("Model")
    tripod = Tripod(model)

    serial = SerialPortBridgeGeneric(rootNode)
    serialportctrl = SerialPortController(rootNode, [tripod.ActuatedArm0.ServoMotor,
                                                     tripod.ActuatedArm1.ServoMotor,
                                                     tripod.ActuatedArm2.ServoMotor], serial)

    MyController(rootNode, [tripod.ActuatedArm0,
                            tripod.ActuatedArm1,
                            tripod.ActuatedArm2], serialportctrl)

    Interaction(rootNode, [tripod.ActuatedArm0,
                           tripod.ActuatedArm1,
                           tripod.ActuatedArm2])

