# -*- coding: utf-8 -*-
"""
    In step8 we are showing how to add collision detection
    and contact management in our project.

    The important component to see in the graph are:
    - the ones added by the addContact function
    - the one in the "Collision" part of the tripod object
    - the one in the "Collision" part of the Sphere object
"""
import Sofa
from splib.constants import Key
from stlib.scene import Scene, Interaction
from stlib.physics.rigid import Sphere
from tripod import Tripod
from tripodcontroller import MyController

class JumpController(Sofa.PythonScriptController):
    """Press Z/Q to play with the ball"""
    def __init__(self, node, actuators):
        self.actuators = actuators
        self.name = "JumpController"

    def onKeyPressed(self, key):
        apos = None
        if key == Key.Z:
            apos = -3.14/4
        if key == Key.Q:
            apos = -3.14/3

        if apos != None:
            for actuator in self.actuators:
                actuator.ServoMotor.angle = apos

def createScene(rootNode):
    scene = Scene(rootNode, gravity=[0,-9810,0])
    scene.VisualStyle.displayFlags="showBehavior"

    scene.createObject("MeshSTLLoader", name="loader", filename="data/mesh2/blueprint.stl")
    scene.createObject("OglModel", src="@loader")

    scene.addContact(alarmDistance=10,
                     contactDistance=2)

    model = scene.createChild("Model")
    Sphere(model, translation=[0.0,40.0,0.0],
                  uniformScale=10,
                  totalMass=0.0015)

    tripod = Tripod(model)

    MyController(rootNode, [tripod.ActuatedArm0,
                            tripod.ActuatedArm1,
                            tripod.ActuatedArm2])

    JumpController(rootNode, [tripod.ActuatedArm0,
                              tripod.ActuatedArm1,
                              tripod.ActuatedArm2])

    Interaction(rootNode, [tripod.ActuatedArm0,
                           tripod.ActuatedArm1,
                           tripod.ActuatedArm2])
