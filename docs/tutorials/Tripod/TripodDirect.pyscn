import Sofa
from math import sin,cos

import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'


def AddConstantAndtransformTableInString(Table, add):
    sizeT =  len(Table);
    strOut= ' ';
    for p in range(sizeT):
        strOut = strOut+ str(Table[p]+add)+' '

    return strOut



def transformTableInString(Table):
    sizeT =  len(Table);
    strOut= ' ';
    for p in range(sizeT):
        strOut = strOut+ str(Table[p])+' '

    return strOut


#Units: cm and kg

def createScene(rootNode):
    rootNode.createObject('VisualStyle', displayFlags='showBehaviorModels showForceFields');

    rootNode.findData('dt').value= 0.01;
    rootNode.findData('gravity').value= '0. 0. 9810';

    rootNode.createObject('RequiredPlugin', name="SoftRobots")

    rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765');
    rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight");
    rootNode.createObject('PythonScriptController', classname="controller", filename="TripodController.py");
    rootNode.createObject('SerialPortBridgeGeneric', name="serial", port="/dev/ttyUSB0", baudRate="115200", size="3", listening="true")


    actuators= rootNode.createChild('actuators')

    ###############################
    ## MECHANICAL MODEL
    ###############################

    robot = rootNode.createChild('robot')
    robot.createObject('EulerImplicit');
    robot.createObject('SparseLDLSolver');
    loader=robot.createObject('GIDMeshLoader', name='loader', filename=path+'tripod1.msh', scale='10');
    loader.init()
    #robot.createObject('MeshVTKLoader', name='loader', filename=path+'branch.vtu');
    ### Here you set the tetrahedra topology
    topo=robot.createObject('TetrahedronSetTopologyContainer', position='@loader.position', tetrahedra='@loader.tetrahedra' , name='container', createTriangleArray='1', checkConnexity='1');
    topo.init()


    #print test.position

    list_branch0= [509, 534,556,573,592,603,504,532,555,571,591, 601];
    list_branch1= [1,2,5,7,11,16,25,28,43,47,63,67];
    list_branch2= [629,627,623,620,612,602,630,628,624, 621,614,604];

    pos_branch0=[0]*3*len(list_branch0)
    j=0;
    for i in list_branch0:
        pos_branch0[j] = topo.position[i-1][0];
        pos_branch0[j+1] = topo.position[i-1][1];
        pos_branch0[j+2] = topo.position[i-1][2];
        j=j+3;

    j=0;
    pos_branch1=[0]*3*len(list_branch1)
    for i in list_branch1:
        pos_branch1[j] = topo.position[i-1][0];
        pos_branch1[j+1] = topo.position[i-1][1];
        pos_branch1[j+2] = topo.position[i-1][2];
        j=j+3;


    j=0;
    pos_branch2=[0]*3*len(list_branch2)
    for i in list_branch2:
        pos_branch2[j] = topo.position[i-1][0];
        pos_branch2[j+1] = topo.position[i-1][1];
        pos_branch2[j+2] = topo.position[i-1][2];
        j=j+3


    actuators.createObject('EulerImplicit')
    actuators.createObject('CGLinearSolver', iterations="30", tolerance='1e-10', threshold='1.0e-99')


    PI=3.14159265359;
    y0=-50;
    x0=0;
    y1=cos(2*PI/3)*y0;
    x1=sin(2*PI/3)*y0;
    y2=cos(4*PI/3)*y0;
    x2=sin(4*PI/3)*y0;

    v1= [- 0.7071*0.5 ,-0.7071*0.8660254];
    v2=[ - 0.7071*0.5 , 0.7071*0.8660254];


    actuators.createObject('MechanicalObject', template='Rigid', position=str(x0)+' '+str(y0)+' 0 0 0 0 1 ' + str(x1)+' '+str(y1)+' 0 0 0 0 1 ' + str(x2)+' '+str(y2)+' 0 0 0 0 1 ',
                           rest_position=str(x0)+' '+str(y0)+' 0 0.7071 0 0 0.7071' + str(x1)+' '+str(y1)+' 0 '+ str(v1[0])+' '+ str(v1[1])+' '+' 0 0.7071 ' + str(x2)+' '+str(y2)+' 0 '+ str(v2[0])+' '+ str(v2[1])+' 0 0.7071 ')
    actuators.createObject('UniformMass', showGravityCenter='1')
    actuators.createObject('RestShapeSpringsForceField', stiffness='1e7', angularStiffness='1e6')

    attach0= actuators.createChild('attach0')
    attach0.createObject('MechanicalObject', name='mm0', template='Vec3', position=transformTableInString(pos_branch0), showObject='1')
    attach0.createObject('RigidMapping',  globalToLocalCoords='1', index='0')

    #visuMotor0 = actuators.createChild('visuMotor0')
    #visuMotor0.createObject('RegularGrid', name='rg', min='-10 -55 5', max='10 -50 -30')
    #visuMotor0.createObject('OglModel', src='@rg')
    #visuMotor0.createObject('RigidMapping',  globalToLocalCoords='1', index='0')



    attach1= actuators.createChild('attach1')
    attach1.createObject('MechanicalObject', name='mm1', template='Vec3', position=transformTableInString(pos_branch1), showObject='1')
    attach1.createObject('RigidMapping',  globalToLocalCoords='1', index='1')

    #visuMotor1 = actuators.createChild('visuMotor1')
    #visuMotor1.createObject('RegularGrid', name='rg', min='-10 -55 5', max='10 -50 -30')
    #visuMotor1.createObject('TransformEngine', name='engine', input_position='@rg.position', translation='0 0 0', rotation='0 '+str(2*PI/3)+' 0', quaternion='0 0 '+str(sin(4*PI/6))+' '+str(cos(4*PI/6)) )
    #visuMotor1.createObject('OglModel', position='@engine.output_position', triangles='@rg.triangles')
    #visuMotor1.createObject('RigidMapping',  globalToLocalCoords='1', index='1')

    attach2= actuators.createChild('attach2')
    attach2.createObject('MechanicalObject', name='mm2', template='Vec3', position=transformTableInString(pos_branch2), showObject='1')
    attach2.createObject('RigidMapping',  globalToLocalCoords='1', index='2')

    #visuMotor2 = actuators.createChild('visuMotor2')
    #rg=visuMotor2.createObject('RegularGrid', name='rg', min='-10 -55 5', max='10 -50 -30')
    #engine=visuMotor2.createObject('TransformEngine', name='engine', input_position='@rg.position', translation='0 0 0', quaternion='0 0 '+str(sin(2*PI/6))+' '+str(cos(2*PI/6)) )
    #ogl=visuMotor2.createObject('OglModel', position='@engine.output_position', triangles='@rg.triangles')
    #visuMotor2.createObject('RigidMapping',  globalToLocalCoords='1', index='2')




    robot.createObject('TetrahedronSetTopologyModifier');
    robot.createObject('TetrahedronSetTopologyAlgorithms');
    robot.createObject('TetrahedronSetGeometryAlgorithms');

    robot.createObject('MechanicalObject', name='tetras');
    robot.createObject('UniformMass', totalmass='0.4');
    robot.createObject('TetrahedronFEMForceField', poissonRatio='0.45',  youngModulus='600');

    robot.createObject('RestShapeSpringsForceField', external_rest_shape='@../actuators/attach0/mm0', stiffness='1e10', points=AddConstantAndtransformTableInString(list_branch0,-1), external_points=transformTableInString(range(len(list_branch0))) )
    robot.createObject('RestShapeSpringsForceField', external_rest_shape='@../actuators/attach1/mm1', stiffness='1e10', points=AddConstantAndtransformTableInString(list_branch1,-1), external_points=transformTableInString(range(len(list_branch1))) )
    robot.createObject('RestShapeSpringsForceField', external_rest_shape='@../actuators/attach2/mm2', stiffness='1e10', points=AddConstantAndtransformTableInString(list_branch2,-1), external_points=transformTableInString(range(len(list_branch2))) )


    visuServo = rootNode.createChild('VisuServo')
    visuServo.createObject('MeshSTLLoader', name='loader', filename='mesh/SG90_servo_with_base.stl', translation='-75 70 75', rotation='90 0 0')
    visuServo.createObject('OglModel', name='servo1', position='@loader.position', triangles='@loader.triangles', translation=[0,-20,0], color='red')

    visuServo.createObject('OglModel', name='servo2', position='@loader.position', triangles='@loader.triangles', translation=[20*sin(2*PI/3), -20*cos(2*PI/3),0], rotation=[0,0,120 ], color='white')

    visuServo.createObject('OglModel', name='servo3', position='@loader.position', triangles='@loader.triangles', translation=[20*sin(4*PI/3),-20*cos(4*PI/3),0], rotation=[0,0,240 ], color='green')


    visuArm1 = actuators.createChild('ArmServo1')
    visuArm1.createObject('MeshSTLLoader', name='loaderArm', filename='mesh/servo_arm_assembly.stl', translation='-75 45 -100 ', rotation='0 0 0')
    visuArm1.createObject('OglModel', name='arm1', position='@loaderArm.position', triangles='@loaderArm.triangles', translation=[0,-20,0], color='red')

    visuArm1.createObject('RigidMapping',  globalToLocalCoords='1', index='0')


    visuArm2 = actuators.createChild('ArmServo2')
    visuArm2.createObject('MeshSTLLoader', name='loaderArm', filename='mesh/servo_arm_assembly.stl', translation='-75 45 -100 ', rotation='0 0 0')
    visuArm2.createObject('OglModel', name='arm2', position='@loaderArm.position', triangles='@loaderArm.triangles', translation=[20*sin(2*PI/3), -20*cos(2*PI/3),0], rotation=[0,0,120 ], color='white')

    visuArm2.createObject('RigidMapping',  globalToLocalCoords='1', index='2')


    visuArm3 = actuators.createChild('ArmServo3')
    visuArm3.createObject('MeshSTLLoader', name='loaderArm', filename='mesh/servo_arm_assembly.stl', translation='-75 45 -100 ', rotation='0 0 0')
    visuArm3.createObject('OglModel', name='arm3', position='@loaderArm.position', triangles='@loaderArm.triangles', translation=[20*sin(4*PI/3),-20*cos(4*PI/3),0], rotation=[0,0,240 ], color='green')

    visuArm3.createObject('RigidMapping',  globalToLocalCoords='1', index='1')


    ######## Export (to record the final position) ########
    robot.createObject('VTKExporter',position='@tetras.position', tetras='1', filename=path+'deformedMesh.vtu', exportAtEnd='1', overwrite='1')





    return rootNode
