import Sofa
from math import sin,cos,pi

import os
path = os.path.dirname(os.path.abspath(__file__))+'/../details/data/mesh2/'
from rigidControl_dev import *

def AddConstantAndtransformTableInString(Table, add):
	sizeT =  len(Table);
	strOut= ' ';
	for p in range(sizeT):
		strOut = strOut+ str(Table[p]+add)+' '

	return strOut

def transformTableInString(Table):
	sizeT =  len(Table);
	strOut= ' ';
	for p in range(sizeT):
		strOut = strOut+ str(Table[p])+' '

	return strOut

#Takes a n dimensional vector of vector and transform it into a simple vector
def transformDoubleTableInSimpleTable(Table):
	size0 =  len(Table);

	# count the size
	size=0;
	for i in range(size0):
		size = size+len(Table[i]);

	TableOut=[0]*size;
	s=0;
	for i in range(size0):
		for j in range(len(Table[i])):
			TableOut[s] = Table[i][j];
			s=s+1;

	return TableOut



#Units: mm and kg
def createScene(rootNode):
	rootNode.createObject('RequiredPlugin', name='SoftRobots', printLog="false")
	rootNode.createObject('RequiredPlugin', name='SofaPython', printLog="false")
	rootNode.createObject('VisualStyle', displayFlags='showBehaviorModels showForceFields hideWireframe showCollisionModels');

	rootNode.findData('dt').value= 0.01;
	rootNode.findData('gravity').value= '0. 0. -9180.';

	rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765');
	rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight");
	# rootNode.createObject('OglGrid', size=100, nbSubdiv=10); # useful to check unit

	rootNode.createObject('FreeMotionAnimationLoop')

	# Add a QPInverseProblemSolver to the scene if you need to solve inverse problem like the one that involved
	# when manipulating the robots by specifying their effector's position instead of by direct control
	# of the actuators parameters.
	rootNode.createObject('QPInverseProblemSolver', printLog='0', epsilon='0.01')

	# # Add collision detection pipeline
	# rootNode.createObject('CollisionPipeline', verbose="0")
	# rootNode.createObject('BruteForceDetection', name="N2")
	# rootNode.createObject('CollisionResponse', response="FrictionContact", responseParams="mu=0.")
	# rootNode.createObject('LocalMinDistance', name="Proximity", alarmDistance="5", contactDistance="1")


	##########################################
	# EFFECTOR GOAL
	##########################################
	goal = rootNode.createChild('goal')
	goal.createObject('EulerImplicit', firstOrder='1')
	goal.createObject('CGLinearSolver', iterations='200', threshold="1e-5", tolerance="1e-5")
	goal.createObject('MechanicalObject', name='goalMO',
		showObject="1",
		showObjectScale="3",
		drawMode="1",
		position = "0 0 32")
	goal.createObject('UncoupledConstraintCorrection')


	###############################
	## MECHANICAL MODEL
	###############################
	robot = rootNode.createChild('robot')
	robot.createObject('EulerImplicit');
	robot.createObject('SparseLDLSolver', name='ldl', template='CompressedRowSparseMatrix3d');
	robot.createObject('GenericConstraintCorrection', solverName='ldl')

	nodeFEM = robot.createChild('nodeFEM')

	loader=nodeFEM.createObject('GIDMeshLoader', name='loader', filename=path+'tripod_mid.gidmsh', rotation="90 0 60");
	loader.init()
	loader2=nodeFEM.createObject('MeshVTKLoader', name='loader2', filename=path+'tripodDeformed.vtu', rotation="90 0 60")
	loader2.init()
	topo=nodeFEM.createObject('TetrahedronSetTopologyContainer', position='@loader2.position', tetrahedra='@loader2.tetrahedra' , name='container', createTriangleArray='1', checkConnexity='1');
	topo.init()

	### indices found with GID (begin at 1)
	list_branch0= [590,592,621,622,650, 652, 673,674,697, 700,723,725];
	list_branch1= [1,9,24,42,64,91,5,14,27,66,93,46];
	list_branch2= [778,774,770,764,755,750,777,772,769,763,754,748];

	#same indices begin at 0
	branch0=[]
	for i in list_branch0:
		branch0 = branch0+[i-1]

	branch1=[]
	for i in list_branch1:
		branch1 = branch1+[i-1]

	branch2=[]
	for i in list_branch2:
		branch2 = branch2+[i-1]

	center = nodeFEM.createObject('SphereROI', template='Vec3d', centers='0 0 0', radii='7', position='@loader.position', name='ROI', computeTriangles='0', computeEdges='0')
	center.init()
	centerList = transformDoubleTableInSimpleTable(center.indices)

	nodeFEM.createObject('TetrahedronSetTopologyModifier');
	nodeFEM.createObject('TetrahedronSetTopologyAlgorithms');
	nodeFEM.createObject('TetrahedronSetGeometryAlgorithms');

	tetras= nodeFEM.createObject('MechanicalObject', name='tetras',  position='@container.position', rest_position='@container.position');
	mass = nodeFEM.createObject('UniformMass', totalmass='0.1');
	tetraFF= nodeFEM.createObject('TetrahedronFEMForceField', poissonRatio='0.45',  youngModulus='1800');

	y0=-25
	x0=0;
	z0=0
	y1=cos(2*pi/3)*y0;
	x1=sin(2*pi/3)*y0;
	y2=cos(4*pi/3)*y0;
	x2=sin(4*pi/3)*y0;

	transform= [ [x0,y0,z0,0,0,0,1], [x1,y1,z0,0,0,sin(4.*pi/6.),cos(4.*pi/6.)],  [x2,y2,z0,0,0,sin(2.*pi/6.),cos(2*pi/6.)], [0,0,0,0,0,0,1] ]


	###############################
	## TRIPOD VISU
	###############################
	visual = nodeFEM.createChild("visual")
	visual.createObject("OglModel", color=[1.0,1.0,1.0,0.5])
	visual.createObject("BarycentricMapping")


	# ###############################
	# ## TRIPOD COLI
	# ###############################
	# collision = nodeFEM.createChild("collision")
	# collision.createObject("MeshSTLLoader", name="loader", filename=path+"tripod.stl", scale='10', rotation="90 0 60", translation="0 0 15")
	# collision.createObject("Mesh", src="@loader")
	# collision.createObject("MechanicalObject")
	# collision.createObject("Point")
	# collision.createObject("Line")
	# collision.createObject("Triangle")
	# collision.createObject("BarycentricMapping")
	#
	#
	# ###############################
	# ## INTERACTION OBJECT
	# ###############################
	# sphere = rootNode.createChild("collision")
	# sphere.createObject("EulerImplicit")
	# sphere.createObject("CGLinearSolver")
	# sphere.createObject("MechanicalObject", position="0. 0. 50.")
	# sphere.createObject("Sphere", radius="10")
	# sphere.createObject("UniformMass", mass="0.02")
	# sphere.createObject("UncoupledConstraintCorrection")


	###############################
	## RIGID PART
	###############################
	controllerNode = robot.createChild('controllerNode')
	myController = rigidControl(controllerNode, "superCaMarche", [branch0, branch1, branch2, centerList],[tetraFF, mass], tetras, nodeFEM, transform, 1)

	visuServo = rootNode.createChild('VisuServo')
	visuServo.createObject('MeshSTLLoader', name='loader', filename=path+'SG90_servomotor.stl', rotation="90 0 0")
	visuServo.createObject('OglModel', name='servo1', position='@loader.position', triangles='@loader.triangles', translation=[0,y0,0], color='white')
	visuServo.createObject('OglModel', name='servo2', position='@loader.position', triangles='@loader.triangles', translation=[-x1,y1,0.], rotation=[0,0,120], color='white')
	visuServo.createObject('OglModel', name='servo3', position='@loader.position', triangles='@loader.triangles', translation=[-x2,y2,0.], rotation=[0,0,240], color='white')


	return rootNode
