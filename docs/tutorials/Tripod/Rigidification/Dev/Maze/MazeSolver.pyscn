import Sofa
from math import sin,cos,pi

import os
path = os.path.dirname(os.path.abspath(__file__))+'/../details/data/mesh/'
path3D = os.path.dirname(os.path.abspath(__file__))+'/../details/data/mesh2/'
from rigidControl import *
from MazeController import *

## moi
from stlib.scene import Scene, Interaction, ContactHeader, MainHeader
from stlib.physics.rigid import Sphere, RigidObject
##

def AddConstantAndtransformTableInString(Table, add):
	sizeT =  len(Table);
	strOut= ' ';
	for p in range(sizeT):
		strOut = strOut+ str(Table[p]+add)+' '

	return strOut

def transformTableInString(Table):
	sizeT =  len(Table);
	strOut= ' ';
	for p in range(sizeT):
		strOut = strOut+ str(Table[p])+' '

	return strOut

#Takes a n dimensional vector of vector and transform it into a simple vector
def transformDoubleTableInSimpleTable(Table):
	size0 =  len(Table);

	# count the size
	size=0;
	for i in range(size0):
		size = size+len(Table[i]);

	TableOut=[0]*size;
	s=0;
	for i in range(size0):
		for j in range(len(Table[i])):
			TableOut[s] = Table[i][j];
			s=s+1;

	return TableOut


#Units: mm and kg
def createScene(rootNode):
	rootNode.createObject('RequiredPlugin', name='SoftRobots', printLog="false")
	rootNode.createObject('RequiredPlugin', name='SofaPython', printLog="false")
	rootNode.createObject('VisualStyle', displayFlags='showBehaviorModels showForceFields hideWireframe ');


	rootNode.findData('dt').value= 0.05;
	MainHeader(rootNode, gravity=[0.0,-9810.0,0.0])
	#moi : ca marche, la bille tombe

	

	

	##Separation des modeles de Christian et de mon labytrinthe et bille ABANDONNE
	MazeNode=rootNode.createChild("SimuMaze")
	####TripodNode=rootNode.createChild("SimuTripod")
	####rootNode.removeChild(MazeNode)
	
	#ContactHeader(rootNode, alarmDistance=10, contactDistance=5)
	#MazeNode.createObject('CollisionPipeline')
	#MazeNode.createObject('BruteForceDetection')
	#MazeNode.createObject('RuleBasedContactManager', rules='0 * FrictionContact?mu='+str(0.0),
      #                                              name='Response', response='FrictionContact')
	#MazeNode.createObject('LocalMinDistance',
    #                    alarmDistance=5, contactDistance=2,
     #                   angleCone=0.01)
	#MazeNode.createObject('GenericConstraintSolver', tolerance="1e-6", maxIterations="1000")

	####rootNode=TripodNode
	#rootNode.findData('gravity').value= '0. -981.0 0.'; #PB FORMER SCENE
	
	


	rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765');
	rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight");
	rootNode.createObject('OglGrid', size=100, nbSubdiv=10); # useful to check unit 
    rootNode.createObject('PythonScriptController', filename="serialPortController.py", classname="interface")
    rootNode.createObject('SerialPortBridgeGeneric', name="serial", port="/dev/ttyUSB0", baudRate="115200", size="3", listening="true")

	

	# Add a QPInverseProblemSolver to the scene if you need to solve inverse problem like the one that involved
	# when manipulating the robots by specifying their effector's position instead of by direct control
	# of the actuators parameters.
	
	
	rootNode.createObject('FreeMotionAnimationLoop')
	rootNode.createObject('QPInverseProblemSolver', printLog='0', epsilon='0.01')
	#TRY OTHER SOLVER NOT WORKING rootNode.createObject('LinearSolverConstraintCorrection')
	rootNode.createObject('CollisionPipeline', verbose="0")
	rootNode.createObject('BruteForceDetection', name="N2")
	rootNode.createObject('CollisionResponse', response="FrictionContact", responseParams="mu=0")
	rootNode.createObject('LocalMinDistance', name="Proximity", alarmDistance="6", contactDistance="3")




	##########################################
	# EFFECTOR GOAL
	##########################################
	goal = rootNode.createChild('goal')
	goal.createObject('EulerImplicit', firstOrder='1')
	goal.createObject('CGLinearSolver', iterations='200', threshold="1e-5", tolerance="1e-5")
	goal.createObject('MechanicalObject', name='goalMO',
		showObject="1",
		showObjectScale="3",
		drawMode="1",
		#position= "0 50 0")
		position = "0 32 0")
	goal.createObject('UncoupledConstraintCorrection')


	###############################
	## MECHANICAL MODEL
	###############################
	robot = rootNode.createChild('robot')
	robot.createObject('EulerImplicit');
	robot.createObject('SparseLDLSolver', name='ldl', template='CompressedRowSparseMatrix3d');
	robot.createObject('GenericConstraintCorrection', solverName='ldl')

	nodeFEM = robot.createChild('nodeFEM')

	loader=nodeFEM.createObject('GIDMeshLoader', name='loader', filename=path3D+'tripod_mid.gidmsh', scale='1');
	loader.init()
	loader2=nodeFEM.createObject('MeshVTKLoader', name='loader2', filename=path3D+'tripodDeformed.vtu')
	loader2.init()
	topo=nodeFEM.createObject('TetrahedronSetTopologyContainer', position='@loader2.position', tetrahedra='@loader2.tetrahedra' , name='container', createTriangleArray='1', checkConnexity='1');
	topo.init()





	### indices found thanks to displayBoxROI_indices = 1 in actuatedarm.py

	BoxROI0= [[711], [712], [727], [728], [729], [736], [738], [741], [743], [745], [748], [749], [750], [751], [752], [754], [755], [758], [759], [760], [763], [764], [765], [766], [768], [769], [770], [771], [772], [773], [774], [775], [776], [777], [778], [779], [780]]
	
	BoxROI1= [[508], [510], [547], [561], [564], [565], [567], [590], [592], [593], [595], [601], [621], [622], [630], [632], [650], [652], [654], [657], [660], [673], [674], [676], [687], [689], [690], [697], [700], [702], [710], [720], [721], [723], [725], [740], [742]]
	
	BoxROI2= [[0], [1], [2], [3], [4], [5], [6], [8], [9], [11], [12], [14], [19], [21], [24], [27], [33], [37], [42], [44], [46], [57], [60], [64], [66], [80], [84], [91], [93], [116], [118], [119], [123]]
	
	branch0= transformDoubleTableInSimpleTable(BoxROI0) 
	branch1= transformDoubleTableInSimpleTable(BoxROI1) 
	branch2= transformDoubleTableInSimpleTable(BoxROI2) 



	center = nodeFEM.createObject('SphereROI', template='Vec3d', centers='0 0 0', radii='5', position='@loader.position', name='ROI', computeTriangles='0', computeEdges='0')
	center.init()
	centerList = transformDoubleTableInSimpleTable(center.indices)
	

	nodeFEM.createObject('TetrahedronSetTopologyModifier');
	nodeFEM.createObject('TetrahedronSetTopologyAlgorithms');
	nodeFEM.createObject('TetrahedronSetGeometryAlgorithms');
	
	

	tetras= nodeFEM.createObject('MechanicalObject', name='tetras',  position='@container.position', rest_position='@container.position');
	vertexMass = nodeFEM.createObject('UniformMass', totalMass='0.1');
	tetraFF= nodeFEM.createObject('TetrahedronFEMForceField', poissonRatio='0.45',  youngModulus='8000');
# youngModulus changed from 1800 to 8000


	y0=0; y1=0; y2=0 
	
	
	x0=0;
	
	z0=-23.5
	
	z1=cos(2*pi/3)*z0;
	x1=sin(2*pi/3)*z0;
	z2=cos(4*pi/3)*z0;
	x2=sin(4*pi/3)*z0;

	transform= [ [x0,y0,z0,0,0,0,1], [x1,y1,z1,0,-sin(4.*pi/6.),0,cos(4.*pi/6.)],  [x2,y2,z2,0,-sin(2.*pi/6.),0,cos(2*pi/6.)], [0,0,0,0,0,0,1] ]


	###############################
	## TRIPOD VISU
	###############################
	visual = nodeFEM.createChild("visual")
	visual.createObject("OglModel", color=[1.0,1.0,1.0,0.5])
	visual.createObject("BarycentricMapping")

	##############################
	## Maze stuff
	##############################
	# box ROI to get the positions of the points at the center of the silicone piece
	####boxroi= robot.createChild("boxroi")
	####ob = getOrientedBoxFromTransform(translation=[0.0,29.0,0.0], eulerRotation=[0.0,0.0,0.0], scale=[20,20,20])
	####boxroi.createObject("BoxROI",
    ####                           orientedBox=ob,
    ####                           name="boxroi",
    ####                           position=robot.nodeFEM.loader2.getData("position"),
    ####                           drawBoxes=True) # je recupere 24 points a + ou - 19.5 de hauteur: indices 228,238,239,250,251,260,261,262,265,280,281,294,295,302,303,316,317,324,327,338,339,352,353,364

	#les positions contenues dans le MechanicalObject tetras
	####indices_pts_center=[228,238,239,250,251,260,261,262,265,280,281,294,295,302,303,316,317,324,327,338,339,352,353,364]


	# position et rotation du labyrinthe : idem centre du silicone whaterver happens around ;)

	#PREFAB FOR THE MAZE ABANDONNED maze = Maze(MazeNode, translation=[0.0,30.0,0.0], rotation=[-90.0,0.0,0.0])
	maze = MazeNode.createChild("Maze")

	### Mechanical model

	totalMass = 10.0
	volume = 1.0
	inertiaMatrix = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]


	#maze.createObject('MechanicalObject', name="dofs", template="Rigid", translation2=[0.0,30.0,0.0], rotation2=[-90.0,0.0,0.0])
	#translation2=[-30.0,-5.0,0.0]
	maze.createObject('MechanicalObject', name="dofs", template="Rigid", translation2=[0.0,0.0,0.0], rotation2=[0.0,0.0,0.0])
	maze.createObject('UniformMass', name="vertexMass", vertexMass=[totalMass, volume, inertiaMatrix[:]])

	#test pour fixer le labyrinthe, nest pas compatible avec le reste des solvers
	#maze.createObject('FixedConstraint', name="fixedConstraint")


	VisualModel = maze.createChild("VisualModel")
	# Graphic model based on a mesh
	#ANOTHER MAZE VisualModel.createObject('OglModel', name="Visual", fileMesh="data/Maze_Coaster.stl")
	VisualModel.createObject('OglModel', name="Visual", fileMesh="data/mazeRot.stl")
	# Building a correspondance between the mechanical and the graphical representation
	VisualModel.createObject('RigidMapping')


	maze.createObject('EulerImplicit', name='odesolver')
	maze.createObject('CGLinearSolver', name='Solver')

	maze.createObject('UncoupledConstraintCorrection')#methode resolution constraints - equivalent solver

	#essai autre solver not working
	#maze.createObject('LinearSolverConstraintCorrection')

	#fix = FixingBox(MazeNode, 
    #                maze, 
    #                translation=[0.0,30.0,0.0],  
    #                scale=[10,5,10])

	#collision model for the maze
	collision=maze.createChild("MazeCollisionModel")
	#collision.createObject('MeshSTLLoader', name='loader', filename="data/Maze_Coaster_decimated.stl", triangulate="true")
	collision.createObject('MeshSTLLoader', name='loader', filename="data/mazeRot.stl", triangulate="true")

	collision.createObject('Mesh', name="mesh", src="@loader")
	collision.createObject('MechanicalObject')

	collision.createObject('Triangle')
	collision.createObject('Line')
	collision.createObject('Point')

	collision.createObject('RigidMapping')
	# end collision


	Sphere(MazeNode, translation=[0.0,40.0,0.0],
                  uniformScale=2,
                  totalMass=0.0015)

	## End maze
	###############################


	# ###############################
	# ## TRIPOD COLI
	# ###############################
	# collision = nodeFEM.createChild("collision")
	# collision.createObject("MeshSTLLoader", name="loader", filename=path+"tripod.stl", scale='10', rotation="90 0 60", translation="0 0 15")
	# collision.createObject("Mesh", src="@loader")
	# collision.createObject("MechanicalObject")
	# collision.createObject("Point")
	# collision.createObject("Line")
	# collision.createObject("Triangle")
	# collision.createObject("BarycentricMapping")
	#
	#
	# ###############################
	# ## INTERACTION OBJECT
	# ###############################
	# sphere = rootNode.createChild("collision")
	# sphere.createObject("EulerImplicit")
	# sphere.createObject("CGLinearSolver")
	# sphere.createObject("MechanicalObject", position="0. 0. 50.")
	# sphere.createObject("Sphere", radius="10")
	# sphere.createObject("UniformMass", vertexMass="0.02")
	# sphere.createObject("UncoupledConstraintCorrection")


	###############################
	## RIGID PART
	###############################
	controllerNode = robot.createChild('controllerNode')
	myController = rigidControl(controllerNode, "superCaMarche", [branch0, branch1, branch2, centerList],[tetraFF, vertexMass], tetras, nodeFEM, transform, 1)

	##ADDED FOR THE MAZE CONTROL
	mazeController = maze.createChild('mazeController')
	LouiseController = MazeControl(mazeController, "mazeController")
	##

	visuServo = rootNode.createChild('VisuServo')
	visuServo.createObject('MeshSTLLoader', name='loader', filename=path3D+'SG90_servomotor.stl', rotation="0 0 0")
	visuServo.createObject('OglModel', name='servo1', position='@loader.position', triangles='@loader.triangles', scale="1", translation=[x0,y0,z0], rotation=[0,0,0], color='white')
	visuServo.createObject('OglModel', name='servo2', position='@loader.position', triangles='@loader.triangles', scale="1", translation=[x1,y1,z1], rotation=[0,120,0], color='white')
	visuServo.createObject('OglModel', name='servo3', position='@loader.position', triangles='@loader.triangles', scale="1", translation=[x2,y2,z2], rotation=[0,240,0], color='white')


	return rootNode
