import Sofa
from math import sin,cos

import os
path = os.path.dirname(os.path.abspath(__file__))+'/../mesh/'
from rigidControl import *

def AddConstantAndtransformTableInString(Table, add):
	sizeT =  len(Table);
	strOut= ' ';
	for p in range(sizeT):
		strOut = strOut+ str(Table[p]+add)+' '

	return strOut



def transformTableInString(Table):
	sizeT =  len(Table);
	strOut= ' ';
	for p in range(sizeT):
		strOut = strOut+ str(Table[p])+' '

	return strOut

#Takes a n dimensional vector of vector and transform it into a simple vector 
def transformDoubleTableInSimpleTable(Table):
    size0 =  len(Table);

    # count the size
    size=0;
    for i in range(size0):
        size = size+len(Table[i]);

    TableOut=[0]*size;
    s=0;
    for i in range(size0):
        for j in range(len(Table[i])):
            TableOut[s] = Table[i][j];
            s=s+1;

    return TableOut



#Units: cm and kg

def createScene(rootNode):

    rootNode.createObject('VisualStyle', displayFlags='showBehaviorModels showForceFields');

    rootNode.findData('dt').value= 0.05;
    rootNode.findData('gravity').value= '0. 0. -9810';

    rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765');
    rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight");
    #rootNode.createObject('PythonScriptController', classname="controller", filename="ControlKeyboard2.py");
    
    
    ###############################
    ## MECHANICAL MODEL
    ###############################

    robot = rootNode.createChild('robot')
    robot.createObject('EulerImplicit');
    robot.createObject('SparseLDLSolver');
    
    nodeFEM = robot.createChild('nodeFEM')
    
    loader=nodeFEM.createObject('GIDMeshLoader', name='loader', filename=path+'tripod1.msh', scale='10');
    loader.init()   
    loader2=nodeFEM.createObject('MeshVTKLoader', name='loader2', filename=path+'deformedMesh.vtu')
    topo=nodeFEM.createObject('TetrahedronSetTopologyContainer', position='@loader2.position', tetrahedra='@loader2.tetrahedra' , name='container', createTriangleArray='1', checkConnexity='1');
    topo.init()
    #print test.position
    
    
    ### indices found with GID (begin at 1)
    list_branch0= [509, 534,556,573,592,603,504,532,555,571,591, 601];
    list_branch1= [1,2,5,7,11,16,25,28,43,47,63,67];
    list_branch2= [629,627,623,620,612,602,630,628,624, 621,614,604];
    
    #same indices begin at 0
    branch0=[]
    for i in list_branch0:
        branch0 = branch0+[i-1]
    
    branch1=[]
    for i in list_branch1:
        branch1 = branch1+[i-1]
    
    branch2=[]
    for i in list_branch2:
        branch2 = branch2+[i-1]
        
        

    center = nodeFEM.createObject('SphereROI', template='Vec3d', centers='0 0 0', radii='7', position='@loader.postion', name='ROI', computeTriangles='0', computeEdges='0')
    center.init()
    centerList = transformDoubleTableInSimpleTable(center.indices)
        

    nodeFEM.createObject('TetrahedronSetTopologyModifier');
    nodeFEM.createObject('TetrahedronSetTopologyAlgorithms');
    nodeFEM.createObject('TetrahedronSetGeometryAlgorithms');

    tetras= nodeFEM.createObject('MechanicalObject', name='tetras',  position='@container.position', rest_position='@loader.position');
    mass = nodeFEM.createObject('UniformMass', totalmass='0.4');
    tetraFF= nodeFEM.createObject('TetrahedronFEMForceField', poissonRatio='0.45',  youngModulus='600');
    
    #fix = nodeFEM.createObject('RestShapeSpringsForceField', name='fix', stiffness='1e10', points=AddConstantAndtransformTableInString(list_branch0,-1) ) #external_rest_shape='@../actuators/attach0/mm0'
    #robot.createObject('RestShapeSpringsForceField', external_rest_shape='@../actuators/attach1/mm1', stiffness='1e10', points=AddConstantAndtransformTableInString(list_branch1,-1), external_points=transformTableInString(range(len(list_branch1))) )
    #robot.createObject('RestShapeSpringsForceField', external_rest_shape='@../actuators/attach2/mm2', stiffness='1e10', points=AddConstantAndtransformTableInString(list_branch2,-1), external_points=transformTableInString(range(len(list_branch2))) )
    
    
    

    #robot.createObject('BoxROI', name='boxROI', box="-30 80 70 30 140 130   -130 -100 70  -60  -20 130  130 -100 70  60  -20 130", drawBoxes='true');
    #robot.createObject('FixedConstraint', indices="@boxROI.indices");
    
    PI=3.14159265359;
    quaternions= [ [0,0,0,1], [0,0,sin(4*PI/6),cos(4*PI/6)],  [0,0,sin(2*PI/6),cos(2*PI/6)], [0,0,0,1] ]
    
    
    controllerNode = robot.createChild('controllerNode')
    myController = rigidControl(controllerNode, "superCaMarche", [branch0, branch1, branch2, centerList],[tetraFF, mass], tetras, nodeFEM, quaternions)
    
    


     

          
    return rootNode
