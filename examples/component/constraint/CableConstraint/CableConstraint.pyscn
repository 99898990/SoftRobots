# -*- coding: utf-8 -*-

import Sofa
import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'

from softrobots.scenes import SceneHeader
from softrobots.simulation import ForwardSimulation
from softrobots.actuators import Cable

def createScene(rootNode):
    SceneHeader(rootNode)
    ForwardSimulation(rootNode)

    ElasticObject(rootNode, name="finger", )
    FixedPointInBox()
                # To facilitate the selection of DoFs, SOFA has a concept called ROI (Region of Interest).
		        # The idea is that ROI component "select" all DoFS that are enclosed by their "region".
                # We use ROI here to select a group of finger's DoFs that will be constrained to stay
                # at a fixed position.
                # You can either use "BoxROI"...
                finger.createObject('BoxROI', name='ROI1', box='-15 0 0 5 10 15', drawBoxes='true')
                # Or "SphereROI"...
                #finger.createObject('SphereROI', name='ROI', centers='0 0 0', radii='5')

                # RestShapeSpringsForceField is one way in Sofa to implement fixed point constraint.
                # Here the constraints are applied to the DoFs selected by the previously defined BoxROI
                finger.createObject('RestShapeSpringsForceField', points='@ROI1.indices', stiffness='1e12')

                # It is also possible to simply set by hand the indices of the points you want to fix.
                #finger.createObject('RestShapeSpringsForceField', points='0 1 2 11 55', stiffness='1e12')

                finger.createObject('LinearSolverConstraintCorrection')


                ##########################################
                # Cable                                  #
                ##########################################

                #  This create a new node in the scene. This node is appended to the finger's node.
                cable = finger.createChild('cable')

                # This create a MechanicalObject, a componant holding the degree of freedom of our
                # mechanical modelling. In the case of a cable it is a set of positions specifying
                # the points where the cable is passing by.
                cable.createObject('MechanicalObject',
                        position=(
                                "-17.5 12.5 2.5 " +
                                "-32.5 12.5 2.5 " +
                                "-47.5 12.5 2.5 " +
                                "-62.5 12.5 2.5 " +
                                "-77.5 12.5 2.5 " +

                                "-83.5 12.5 4.5 " +
                                "-85.5 12.5 6.5 " +
                                "-85.5 12.5 8.5 " +
                                "-83.5 12.5 10.5 " +

                                "-77.5 12.5 12.5 " +
                                "-62.5 12.5 12.5 " +
                                "-47.5 12.5 12.5 " +
                                "-32.5 12.5 12.5 " +
                                "-17.5 12.5 12.5 " ))

                # Create a CableConstraint object with a name.
                # the indices are referring to the MechanicalObject's positions.
                # The last indice is where the pullPoint is connected.
                cable.createObject('CableConstraint', name="aCableActuator",
                        #indices=range(0,14),
                        indices="0 1 2 3 4 5 6 7 8 9 10 11 12 13",
                        pullPoint="0.0 12.5 2.5")

                # This create a BarycentricMapping. A BarycentricMapping is a key element as it will create a bi-directional link
                # between the cable's DoFs and the finger's ones so that movements of the cable's DoFs will be mapped
                # to the finger and vice-versa;
                cable.createObject('BarycentricMapping')

                # This create a PythonScriptController that permits to programatically implement new behavior
                # or interactions using the Python programming langage. The controller is referring to a
                # file named "controller.py".
		cable.createObject('PythonScriptController', filename="controller/FingerController.py", classname="controller")

                ##########################################
                # Visualization                          #
                ##########################################
                # In Sofa, visualization is handled by adding a rendering model.
                # Create an empty child node to store this rendering model.
                fingerVisu = finger.createChild('visu')

                # Add to this empty node a rendering model made of triangles and loaded from an stl file.
                fingerVisu.createObject('OglModel', filename=path+"finger.stl", template='ExtVec3f', color="0.0 0.7 0.7")

                # Add a BarycentricMapping to deform the rendering model in a way that follow the ones of the parent mechanical model.
                fingerVisu.createObject('BarycentricMapping')

                return rootNode
